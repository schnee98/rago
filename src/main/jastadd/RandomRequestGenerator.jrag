import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.stream.*;

aspect RandomRequestGenerator{
    /**
      * Calls <code>generateUrl()</code> for all paths.
      * @return The list of String representing the generated URLs.
      */
    syn List<String> OpenAPIObject.generateRequests(Map<String, List<Object>> generatedParameters){
      List<String> urls = new ArrayList<>();

      for (PathItemTuple tuple : getPaths().getPathsList())
        urls.addAll(tuple.generateUrl(generatedParameters, getServers(0)));
      return urls;
    }

    /**
      * Checks if a path has the request types <code>GET</code> and/or <code>POST</code>, and calls <code>generateRandomUrl(String pathRef)</code>.
      * <p>Afterwards, generated URLs are saved in a list.</p>
      * @return The list of String representing the generated URLs.
      */
    inh List<String> PathItemTuple.generateUrl(Map<String, List<Object>> generatedParameters, ServerObject server);
    eq PathsObject.getPaths(int i).generateUrl(Map<String, List<Object>> generatedParameters, ServerObject server){
      List<String> urls = new ArrayList<>();
      PathItemObject pathItemObject = getPaths(i).getPathItem().pathItemObject();
      String path = server.getUrl();
      String finalPath = path;

      if (server.getNumServerVariables() != 0) {
        for (ServerVariablesTuple tuple : server.getServerVariablesList())
          path = path.replace(String.format("{%s}", tuple.getName()), tuple.getVariable().getDefault());
      }
      Optional.ofNullable(pathItemObject.getGetOperation())
          .ifPresent(operation -> urls.add(operation.generateRandomUrl(generatedParameters, finalPath + getPaths(i).getKey())));

      return urls;
    }

    /**
      * Checks which parameter types the targeted GET request has (Path or Query) and calls corresponding random parameter generator.
      * <p>Afterwards, generated parameters are written in the url.</p>
      * @return An URL with the generated parameters in String.
      */
    syn String OperationObject.generateRandomUrl(Map<String, List<Object>> generatedParameters, String pathRef){
      for (ParameterType parameterType : getParametersList()) {
        ParameterObject parameterObject = parameterType.parameterObject();
        switch (parameterObject.getIn()) {
          case "path":
            pathRef = parameterObject.getRandomPathParameter(generatedParameters.get(parameterObject.getName()), pathRef);
          case "query":
            pathRef = parameterObject.getRandomQueryParameter(generatedParameters.get(parameterObject.getName()), pathRef);
        }
      }
      if (pathRef.contains("&")) pathRef = pathRef.replaceFirst("&", "?");
      return pathRef;
    }

    /**
      * Checks which schema type the parameter has (String or Integer) and generates parameters.
      * @return A generated Path parameter.
      */
    syn String ParameterObject.getRandomPathParameter(List<Object> generatedParameters, String pathRef){
      SchemaObject schemaObject = getSchema().schemaObject();
      String pathPart = pathRef.substring(pathRef.indexOf("{"), pathRef.indexOf("}") + 1);

      switch (schemaObject.getType()) {
        case "string":
          return pathRef.replace(pathPart, generateStringParameter(generatedParameters));
        case "integer":
          return pathRef.replace(pathPart, generateIntegerParameter(generatedParameters).toString());
      }
      return pathRef;
    }

    /**
      * Checks which schema type the parameter has (String or Integer) and generates parameters.
      * @return A generated Query parameter.
      */
    syn String ParameterObject.getRandomQueryParameter(List<Object> generatedParameters, String pathRef){
      SchemaObject schemaObject = getSchema().schemaObject();

      switch (schemaObject.getType()) {
        case "string":
          return String.format("%s&%s=%s", pathRef, getName(), generateStringParameter(generatedParameters));
        case "integer":
          return String.format("%s&%s=%s", pathRef, getName(), generateIntegerParameter(generatedParameters));
        case "array":
          if (schemaObject.getItemsSchema().getSchema().schemaObject().getType().equals("string")) {
            return String.format("%s%s", pathRef, generateEnumParameterQuery(generatedParameters));
          }
          break;
      }
      return pathRef;
    }


    /**
      * Generates parameters for all paths.
      * @return The tuple (Map) representing the generated parameter values mapped into corresponding parameter names.
      */
    public Map<String, List<Object>> OpenAPIObject.generateParameters() {
      Map<String, List<Object>> parameters = new HashMap<>();

      for (ParameterType parameterType : parameterTypes()) {
        ParameterObject parameterObject = parameterType.parameterObject();
        List<Object> values = generateValuesBasedOnType(parameterObject.getSchema().schemaObject());
        parameters.merge(parameterObject.getName(), values, (oldVal, newVal) -> {
          oldVal.addAll(newVal);
          return oldVal;
        });
      }
      return parameters;
    }

    private List<Object> OpenAPIObject.generateValuesBasedOnType(SchemaObject schema) {
      List<Object> values = new ArrayList<>();
      ParameterObject parameterObject = new ParameterObject();

      switch (schema.getType()) {
        case "string":
          values.add(parameterObject.generateRandomString(schema.getEnumList()));
          break;
        case "integer":
          values.add(parameterObject.generateRandomInt(-1, 100)); // boundary at -1 and 100
          break;
        case "array":
          SchemaObject itemSchema = schema.getItemsSchema().getSchema().schemaObject();
          List<Object> arrayValues = generateArrayValues(itemSchema);
          values.add(arrayValues);
          break;
        default:
          break;
      }
      return values;
    }

    private List<Object> OpenAPIObject.generateArrayValues(SchemaObject itemSchema) {
      List<Object> arrayValues = new ArrayList<>();
      ParameterObject parameterObject = new ParameterObject();

      if ("string".equals(itemSchema.getType())) {
        itemSchema.getEnumList().forEach(enumObject -> arrayValues.add(parameterObject.generateRandomEnum(enumObject)));
      } else if ("integer".equals(itemSchema.getType())) {
        IntStream.range(0, 5).forEach(index -> arrayValues.add(parameterObject.generateRandomInt(-1, 100)));
      }
      return arrayValues;
    }

    /**
      * Generates a random String value.
      * @return A random String.
      */
    public String ParameterObject.generateRandomString(JastAddList<EnumObject> enumObjects){
      Random rand = new Random();
      if (enumObjects.getNumChild() != 0) {
        String enumString = enumObjects.getChild(rand.nextInt(enumObjects.getNumChild())).getEnum().toString();
        return URLEncoder.encode(enumString, Charset.forName("US-ASCII"));
      }
      return rand
          .ints('a', 'z' + 1)
          .limit(10)
          .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
          .toString();
    }

    /**
      * Generates a random Integer value.
      * @return A random Integer.
      */
    public Integer ParameterObject.generateRandomInt(int minimum,int maximum){
      Random rand = new Random();
      if (minimum >= 0 && maximum > minimum) return minimum + rand.nextInt(maximum - minimum + 1);
      return rand.nextInt();
    }


    /**
      * Generates a random value of Enum.
      * @return A random value of Enum.
      */
    public String ParameterObject.generateRandomPath(EnumObject enumObject, String pathRef){
      Random rand = new Random();
      String encodedEnum = URLEncoder.encode(enumObject.getEnum().toString(), Charset.forName("US-ASCII"));

      return rand.nextBoolean() ? String.format("%s&%s=%s", pathRef, getName(), encodedEnum) : pathRef;
    }

    /**
      * Generates a random value of Enum.
      * @return A random value of Enum.
      */
    public String ParameterObject.generateRandomEnum(EnumObject enumObject){
      Random rand = new Random();
      String encodedEnum = URLEncoder.encode(enumObject.toString(), Charset.forName("US-ASCII"));

      return rand.nextBoolean() ? encodedEnum : "";
    }

    /**
      * This is a method to avoid the duplication of Urls.
      * @return The list of Urls.
      */
    syn String OpenAPIObject.findURLContainingReference(List<String> urls, String reference) = urls.stream()
        .filter(url -> url.contains(reference))
        .findFirst()
        .orElse(reference);

    /**
      * This is a method to get a String parameter from the generated parameters.
      * @return the value of String.
      */
    syn String ParameterObject.generateStringParameter(List<Object> generatedParameters){
      for (Object value : generatedParameters) {
        if (value instanceof String)
          return (String) value;
      }
      return null;
    }

    /**
      * This is a method to get a Integer parameter from the generated parameters.
      * @return The value of Integer.
      */
    syn Integer ParameterObject.generateIntegerParameter(List<Object> generatedParameters){
      for (Object value : generatedParameters) {
        if (value instanceof Integer)
          return (Integer) value;
      }
      return null;
    }

    /**
      * This is a method to get a parameter of Enumeration from the generated parameters.
      * @return The value of String.
      */
    syn String ParameterObject.generateEnumParameterQuery(List<Object> generatedParameters){
      SchemaObject schemaObject = getSchema().schemaObject().getItemsSchema().getSchema().schemaObject();
      String path = "";

      for (EnumObject enumObject : schemaObject.getEnumList()) {
        for (Object object : generatedParameters) {
          if (object instanceof List && ((List<Object>) object).contains(enumObject.getEnum().toString()))
            path += "&" + getName() + "=" + enumObject.getEnum().toString();
        }
      }

      return path;
    }
}