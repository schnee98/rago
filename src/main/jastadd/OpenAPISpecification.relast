abstract Extendable ::= Extensions:Extension*;

//OpenAPI Object
OpenAPIObject : Extendable ::= <OpenAPI> <JsonSchemaDialect> Info:InfoObject Servers:ServerObject* Paths:PathsObject Webhooks:Webhook* Components:ComponentsObject SecurityRequirements:SecurityRequirementObject* Tags:TagObject* [ExternalDocs:ExternalDocObject];
Webhook ::= <Key> PathItem:PathItemType;

//Info Object
InfoObject : Extendable ::= <Title> <Summary> <Description> <TermsOfService> <Version> [Contact:ContactObject] [License:LicenseObject];

//Contact Object
ContactObject : Extendable ::= <Name> <Url> <Email>;

//License Object
LicenseObject : Extendable ::= <Name> <Identifier> <Url>;

//Server Object
ServerObject : Extendable ::= <Url> <Description> ServerVariables:ServerVariablesTuple*;
ServerVariablesTuple ::= <Name> Variable:ServerVariableObject;

//Server Variable Object
ServerVariableObject : Extendable ::= <Default> <Description> Enums:Enum*;
Enum ::= <EnumValue>;

//Components Object
ComponentsObject : Extendable ::= Schemas:SchemaTuple* Responses:ResponseTuple* Parameters:ParameterTuple* Examples:ExampleTuple* RequestBodies:RequestBodyTuple* Headers:HeaderTuple* SecuritySchemes:SecuritySchemeTuple* Links:LinkTuple* Callbacks:CallbackTuple* PathItems:PathItemTuple*;

SchemaTuple ::= <Key> Schema:SchemaType;
ResponseTuple ::= <Key> Response:ResponseType;
ParameterTuple ::= <Key> Parameter:ParameterType;
ExampleTuple ::= <Keyv> Example:ExampleType;
RequestBodyTuple ::= <Key> RequestBody:RequestBodyType;
HeaderTuple ::= <Key> Header:HeaderType;
SecuritySchemeTuple ::= <Key> SecurityScheme:SecuritySchemeType;
LinkTuple ::= <Key> Link:LinkType;
CallbackTuple ::= <Key> Callback:CallbackType;
PathItemTuple ::= <Key> PathItem:PathItemType;

//Paths Object
PathsObject : Extendable ::= Paths:PathItemTuple*;

//Path Item Object
abstract PathItemType;
PathItemReference : PathItemType ::= <Ref> <Summary> <Description> Extensions:Extension*;
rel PathItemReference.reference -> PathItemObject;
PathItemObject : PathItemType ::= <Ref> <Summary> <Description> [GetOperation:OperationObject] [PutOperation:OperationObject] [PostOperation:OperationObject] [DeleteOperation:OperationObject] [OptionsOperation:OperationObject] [HeadOperation:OperationObject] [PatchOperation:OperationObject] [TraceOperation:OperationObject] Servers:ServerObject* Parameters:ParameterType* Extensions:Extension*;

//Operation Object
OperationObject ::= <Summary> <Description> <OperationID> <Deprecated:Boolean> Tags:Tag* [ExternalDocs:ExternalDocObject] Parameters:ParameterType* [RequestBody:RequestBodyType] Responses:ResponsesObject Callbacks:CallbackTuple* SecurityRequirements:SecurityRequirementObject* Servers:ServerObject* Extensions:Extension*;

Tag ::= <Tag>;

//External Documentation Object
ExternalDocObject : Extendable ::= <Description> <Url>;

//Parameter Object
abstract ParameterType;
ParameterReference : ParameterType ::= <Ref> <Summary> <Description>;
rel ParameterReference.reference -> ParameterObject;
ParameterObject : ParameterType ::= <Name> <In> <Description> <Required:Boolean> <Deprecated:Boolean> <AllowEmptyValue:Boolean> <Style> <Explode:Boolean> <AllowReserved:Boolean> <Example:Object> [Schema:SchemaType] Examples:ExampleTuple* Content:ContentTuple* Extensions:Extension*;
ContentTuple ::= <Key> MediaType:MediaTypeObject;

//Request Body Object
abstract RequestBodyType;
RequestBodyReference : RequestBodyType ::= <Ref> <Summary> <Description>;
rel RequestBodyReference.reference -> RequestBodyObject;
RequestBodyObject : RequestBodyType ::= <Description> <Required:Boolean> Content:ContentTuple* Extensions:Extension*;

//Media Type Object
MediaTypeObject : Extendable ::= <Example:Object> [Schema:SchemaType] Examples:ExampleTuple* Encodings:EncodingTuple*;
EncodingTuple ::= <Key> Encoding:EncodingObject;

//Encoding Object
EncodingObject : Extendable ::= <ContentType> <Style> <Explode:Boolean> <AllowReserved:Boolean> Headers:HeaderTuple*;

//Responses Object
ResponsesObject ::= Responses:ResponseTuple*;

//Response Object
abstract ResponseType;
ResponseReference : ResponseType ::= <Ref> <Summary> <Description>;
rel ResponseReference.reference -> ResponseObject;
ResponseObject : ResponseType ::= <Description> Headers:HeaderTuple* Contents:ContentTuple* Links:LinkTuple* Extensions:Extension*;

//Callback Object
abstract CallbackType;
CallbackReference : CallbackType ::= <Ref> <Summary> <Description>;
rel CallbackReference.reference -> CallbackObject;
CallbackObject : CallbackType ::= Expressions:Expression* Extensions:Extension*;

Extension ::= <Key> <Value:Object>;
Expression ::= <Name> PathItem:PathItemType;

//Example Object
abstract ExampleType;
ExampleReference : ExampleType ::= <Ref> <Summary> <Description>;
rel ExampleReference.reference -> ExampleObject;
ExampleObject : ExampleType ::= <Summary> <Description> <Value:Object> <ExternalValue> Extensions:Extension*;

//Link Object
abstract LinkType;
LinkReference : LinkType ::= <Ref> <Summary> <Description>;
rel LinkReference.reference -> LinkObject;
LinkObject : LinkType ::= <OperationRef> <OperationID> <LinkRequestBody:Object> <Description> LinkParameters:LinkParameterTuple* [Server:ServerObject] Extensions:Extension*;

LinkParameterTuple ::= <Key> <Value>;

//Header Object
abstract HeaderType;
HeaderReference : HeaderType ::= <Ref> <Summary> <Description>;
rel HeaderReference.reference -> HeaderObject;
HeaderObject : HeaderType ::= <Description> <Required:Boolean> <DeprecatedBoolean:Boolean> <AllowEmptyValue:Boolean> <Style> <Explode:Boolean> <AllowReserved:Boolean> <Example:Object> [Schema:SchemaType] Examples:ExampleTuple* Contents:ContentTuple* Extensions:Extension*;

//Tag Object
TagObject : Extendable ::= <Name> <Description> [ExternalDoc:ExternalDocObject];

//Schema Object
abstract SchemaType;
SchemaReference : SchemaType ::= <Ref> <Summary> <Description>;
rel SchemaReference.reference -> SchemaObject;
SchemaObject : SchemaType ::= <Name> <AdditionalProperties:Object> <DefaultValue:Object> <Description> <DeprecatedBoolean:Boolean> <ExclusiveMaximum:Boolean> <ExclusiveMinimum:Boolean> <Format> <Maximum:BigDecimal> <Minimum:BigDecimal> <MaxItems:Integer> <MinItems:Integer> <MaxLength:Integer> <MinLength:Integer> <MaxProperties:Integer> <MinProperties:Integer> <MultipleOf:BigDecimal> <Pattern> <ReadOnly:Boolean> <WriteOnly:Boolean> <Type> <Title> <UniqueItems:Boolean> <Nullable:Boolean> <MaxContains:Integer> <MinContains:Integer> <DependentRequired:Object> <DependentSchema:SchemaType> <Const:Object> [Discriminator:DiscriminatorObject] Enum:EnumObject* ExampleElements:ExampleElement* [ExternalDoc:ExternalDocObject] [ItemsSchema:ItemsSchemaObject] [NotSchema:NotSchemaObject] PropertyItems:PropertyItem* RequiredFields:RequiredField* AllOfSchema:AllOfSchemaObject* AnyOfSchema:AnyOfSchemaObject* OneOfSchema:OneOfSchemaObject* Types:TypeArray* [Xml:XmlObject] Extensions:Extension*;

ItemsSchemaObject ::= Schema:SchemaType;
NotSchemaObject ::= Schema:SchemaType;
PropertyItem ::= <Name> Schema:SchemaType;
AllOfSchemaObject ::= Schema:SchemaType;
AnyOfSchemaObject ::= Schema:SchemaType;
OneOfSchemaObject ::= Schema:SchemaType;
ExampleElement ::= <Example:Object>;
TypeArray ::= <TypeElements:Object>;
EnumObject ::= <Enum:Object>;
RequiredField ::= <Value>;

//Discriminator Object
DiscriminatorObject : Extendable ::= <PropertyName> Mappings:MappingTuple*;
MappingTuple ::= <Key> <Value>;

//XML Object
XmlObject : Extendable ::= <Name> <Namespace> <Prefix> <Attribute:Boolean> <Wrapped:Boolean>;

//Security Scheme Object
abstract SecuritySchemeType;
SecuritySchemeReference : SecuritySchemeType ::= <Ref> <Summary> <Description>;
rel SecuritySchemeReference.reference -> SecuritySchemeObject;
SecuritySchemeObject : SecuritySchemeType ::= <Type> <Description> <Name> <In> <Scheme> <BearerFormat> <OpenIdConnectUrl> [OAuthFlows:OAuthFlowsObject] Extensions:Extension*;

//OAuth Flows Object
OAuthFlowsObject : Extendable ::= [Implicit:OAuthFlowObject] [Password:OAuthFlowObject] [ClientCredentials:OAuthFlowObject] [AuthorizationCode:OAuthFlowObject];

//OAuth Flow Object
OAuthFlowObject : Extendable ::= <AuthorizationUrl> <TokenUrl> <RefreshUrl> Scopes:ScopesTuple*;
ScopesTuple ::= <ScopesKey> <ScopesValue>;

//Security Requirement Object
SecurityRequirementObject ::= Tuple:SecurityRequirementTuple*;

SecurityRequirementTuple ::= <Name> Value:SecurityRequirementValue*;
SecurityRequirementValue ::= <Value>;