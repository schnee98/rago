import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;

aspect Parser {

  public static OpenAPIObject OpenAPIObject.parseOpenAPI(io.swagger.v3.oas.models.OpenAPI openAPI) {
    OpenAPIObject openAPIObject = new OpenAPIObject();

    Optional.ofNullable(openAPI.getOpenapi()).ifPresent(openAPIObject::setOpenAPI);
    Optional.ofNullable(openAPI.getInfo()).ifPresent(info -> openAPIObject.setInfo(InfoObject.parseInfo(info)));
    Optional.ofNullable(openAPI.getPaths()).ifPresent(paths -> openAPIObject.setPaths(PathsObject.parsePaths(paths)));
    Optional.ofNullable(openAPI.getServers()).ifPresent(servers -> servers.forEach(server -> openAPIObject.addServers(ServerObject.parseServer(server))));
    Optional.ofNullable(openAPI.getComponents()).ifPresent(components -> openAPIObject.setComponents(ComponentsObject.parseComponents(components)));
    Optional.ofNullable(openAPI.getSecurity()).ifPresent(securityRequirements -> securityRequirements.forEach(securityRequirement -> openAPIObject.addSecurityRequirements(SecurityRequirementObject.parseSecurityRequirement(securityRequirement))));
    Optional.ofNullable(openAPI.getTags()).ifPresent(tags -> tags.forEach(tag -> openAPIObject.addTags(TagObject.parseTag(tag))));
    Optional.ofNullable(openAPI.getExternalDocs()).ifPresent(externalDocs -> openAPIObject.setExternalDocs(ExternalDocObject.parseExternalDocs(externalDocs)));
    Optional.ofNullable(openAPI.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> openAPIObject.addExtensions(new Extension(key, value))));
    Optional.ofNullable(openAPI.getPaths()).ifPresent(paths -> openAPIObject.setPaths(PathsObject.parsePaths(paths)));

    return openAPIObject;
  }

  public static PathsObject PathsObject.parsePaths(io.swagger.v3.oas.models.Paths paths) {
    PathsObject pathsObject = new PathsObject();

    Optional.ofNullable(paths).ifPresent(element -> element.forEach((key, value) -> pathsObject.addPaths(new PathItemTuple(key, PathItemObject.parsePathItem(value)))));
    Optional.ofNullable(paths.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> pathsObject.addExtensions(new Extension(key, value))));

    return pathsObject;
  }

  public static InfoObject InfoObject.parseInfo(io.swagger.v3.oas.models.info.Info info) {
    InfoObject infoObject = new InfoObject();

    Optional.ofNullable(info.getTitle()).ifPresent(infoObject::setTitle);
    Optional.ofNullable(info.getVersion()).ifPresent(infoObject::setVersion);
    Optional.ofNullable(info.getDescription()).ifPresent(infoObject::setDescription);
    Optional.ofNullable(info.getTermsOfService()).ifPresent(infoObject::setTermsOfService);
    Optional.ofNullable(info.getContact()).ifPresent(contact -> infoObject.setContact(ContactObject.parseContact(contact)));
    Optional.ofNullable(info.getLicense()).ifPresent(license -> infoObject.setLicense(LicenseObject.parseLicense(license)));
    Optional.ofNullable(info.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> infoObject.addExtensions(new Extension(key, value))));

    return infoObject;
  }

    public static ContactObject ContactObject.parseContact(io.swagger.v3.oas.models.info.Contact contact){
      ContactObject contactObject = new ContactObject();

      Optional.ofNullable(contact.getName()).ifPresent(contactObject::setName);
      Optional.ofNullable(contact.getUrl()).ifPresent(contactObject::setUrl);
      Optional.ofNullable(contact.getEmail()).ifPresent(contactObject::setEmail);
      Optional.ofNullable(contact.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> contactObject.addExtensions(new Extension(key, value))));

      return contactObject;
    }

    public static LicenseObject LicenseObject.parseLicense(io.swagger.v3.oas.models.info.License license){
      LicenseObject licenseObject = new LicenseObject();

      Optional.ofNullable(license.getName()).ifPresent(licenseObject::setName);
      Optional.ofNullable(license.getUrl()).ifPresent(licenseObject::setUrl);
      Optional.ofNullable(license.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> licenseObject.addExtensions(new Extension(key, value))));

      return licenseObject;
    }

    public static ComponentsObject ComponentsObject.parseComponents(io.swagger.v3.oas.models.Components components) {
      ComponentsObject componentsObject = new ComponentsObject();

      Optional.ofNullable(components.getSchemas()).ifPresent(schemas -> schemas.forEach((key, value) -> componentsObject.addSchemas(new SchemaTuple(key, SchemaType.parseSchema(value)))));
      Optional.ofNullable(components.getResponses()).ifPresent(responses -> responses.forEach((key, value) -> componentsObject.addResponses(new ResponseTuple(key, ResponseType.parseResponse(value)))));
      Optional.ofNullable(components.getParameters()).ifPresent(parameters -> parameters.forEach((key, value) -> componentsObject.addParameters(new ParameterTuple(key, ParameterType.parseParameter(value)))));
      Optional.ofNullable(components.getExamples()).ifPresent(examples -> examples.forEach((key, value) -> componentsObject.addExamples(new ExampleTuple(key, ExampleType.parseExample(value)))));
      Optional.ofNullable(components.getRequestBodies()).ifPresent(requestBodies -> requestBodies.forEach((key, value) -> componentsObject.addRequestBodies(new RequestBodyTuple(key, RequestBodyType.parseRequestBody(value)))));
      Optional.ofNullable(components.getHeaders()).ifPresent(headers -> headers.forEach((key, value) -> componentsObject.addHeaders(new HeaderTuple(key, HeaderType.parseHeader(value)))));

      Optional.ofNullable(components.getSecuritySchemes()).ifPresent(securitySchemes -> securitySchemes.forEach((key, value) -> componentsObject.addSecuritySchemes(new SecuritySchemeTuple(key, SecuritySchemeType.parseSecurityScheme(value)))));
      Optional.ofNullable(components.getLinks()).ifPresent(links -> links.forEach((key, value) -> componentsObject.addLinks(new LinkTuple(key, LinkType.parseLink(value)))));
      Optional.ofNullable(components.getCallbacks()).ifPresent(callbacks -> callbacks.forEach((key, value) -> componentsObject.addCallbacks(new CallbackTuple(key, CallbackType.parseCallback(value)))));
      Optional.ofNullable(components.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> componentsObject.addExtensions(new Extension(key, value))));

      return componentsObject;
    }

    public static RequestBodyType RequestBodyType.parseRequestBody(io.swagger.v3.oas.models.parameters.RequestBody requestBody) {
      if (requestBody.get$ref() != null) return new RequestBodyReference(requestBody.get$ref(), null, null);

      RequestBodyObject requestBodyObject = new RequestBodyObject();

      Optional.ofNullable(requestBody.getContent()).ifPresent(contents -> contents.forEach((key, value) -> requestBodyObject.addContent(new ContentTuple(key, MediaTypeObject.parseMediaType(value)))));
      Optional.ofNullable(requestBody.getDescription()).ifPresent(requestBodyObject::setDescription);
      Optional.ofNullable(requestBody.getRequired()).ifPresent(requestBodyObject::setRequired);
      Optional.ofNullable(requestBody.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> requestBodyObject.addExtensions(new Extension(key, value))));

      return requestBodyObject;
    }

    public static PathItemType PathItemType.parsePathItem(io.swagger.v3.oas.models.PathItem pathItem) {
      if (pathItem.get$ref() != null) return new PathItemReference(pathItem.get$ref(), null, null, null);

      PathItemObject pathItemObject = new PathItemObject();

      Optional.ofNullable(pathItem.getSummary()).ifPresent(pathItemObject::setSummary);
      Optional.ofNullable(pathItem.getDescription()).ifPresent(pathItemObject::setDescription);
      Optional.ofNullable(pathItem.getGet()).ifPresent(operation -> pathItemObject.setGetOperation(OperationObject.parseOperation(operation)));
      Optional.ofNullable(pathItem.getGet()).ifPresent(operation -> pathItemObject.setGetOperation(OperationObject.parseOperation(operation)));
      Optional.ofNullable(pathItem.getGet()).ifPresent(operation -> pathItemObject.setGetOperation(OperationObject.parseOperation(operation)));
      Optional.ofNullable(pathItem.getGet()).ifPresent(operation -> pathItemObject.setGetOperation(OperationObject.parseOperation(operation)));
      Optional.ofNullable(pathItem.getGet()).ifPresent(operation -> pathItemObject.setGetOperation(OperationObject.parseOperation(operation)));
      Optional.ofNullable(pathItem.getGet()).ifPresent(operation -> pathItemObject.setGetOperation(OperationObject.parseOperation(operation)));
      Optional.ofNullable(pathItem.getGet()).ifPresent(operation -> pathItemObject.setGetOperation(OperationObject.parseOperation(operation)));
      Optional.ofNullable(pathItem.getGet()).ifPresent(operation -> pathItemObject.setGetOperation(OperationObject.parseOperation(operation)));
      Optional.ofNullable(pathItem.getServers()).ifPresent(servers -> servers.forEach(server -> pathItemObject.addServers(ServerObject.parseServer(server))));
      Optional.ofNullable(pathItem.getParameters()).ifPresent(parameters -> parameters.forEach(parameter -> pathItemObject.addParameters(ParameterType.parseParameter(parameter))));
      Optional.ofNullable(pathItem.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> pathItemObject.addExtensions(new Extension(key, value))));

      return pathItemObject;
    }

    public static OperationObject OperationObject.parseOperation(io.swagger.v3.oas.models.Operation operation) {
      OperationObject operationObject = new OperationObject();

      Optional.ofNullable(operation.getDeprecated()).ifPresent(operationObject::setDeprecated);
      Optional.ofNullable(operation.getTags()).ifPresent(tags -> tags.forEach(tag -> operationObject.addTags(new Tag(tag))));
      Optional.ofNullable(operation.getSummary()).ifPresent(operationObject::setSummary);
      Optional.ofNullable(operation.getDescription()).ifPresent(operationObject::setDescription);
      Optional.ofNullable(operation.getExternalDocs()).ifPresent(externalDocs -> operationObject.setExternalDocs(ExternalDocObject.parseExternalDocs(externalDocs)));
      Optional.ofNullable(operation.getOperationId()).ifPresent(operationObject::setOperationID);
      Optional.ofNullable(operation.getParameters()).ifPresent(parameters -> parameters.forEach(parameter -> operationObject.addParameters(ParameterType.parseParameter(parameter))));
      Optional.ofNullable(operation.getRequestBody()).ifPresent(requestBody -> operationObject.setRequestBody(RequestBodyType.parseRequestBody(requestBody)));
      Optional.ofNullable(operation.getResponses()).ifPresent(responses -> {
        ResponsesObject responsesObject = new ResponsesObject();
        responses.forEach((key, value) -> responsesObject.addResponses(new ResponseTuple(key, ResponseObject.parseResponse(value))));
        operationObject.setResponses(responsesObject);
      });
      Optional.ofNullable(operation.getCallbacks()).ifPresent(callbacks -> callbacks.forEach((key, value) -> new CallbackTuple(key, CallbackObject.parseCallback(value))));
      Optional.ofNullable(operation.getSecurity()).ifPresent(securityRequirements -> securityRequirements.forEach(requirement -> operationObject.addSecurityRequirements(SecurityRequirementObject.parseSecurityRequirement(requirement))));
      Optional.ofNullable(operation.getServers()).ifPresent(servers -> servers.forEach(server -> operationObject.addServers(ServerObject.parseServer(server))));
      Optional.ofNullable(operation.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> new Extension(key, value)));

      return operationObject;
    }

    public static ParameterType ParameterType.parseParameter(io.swagger.v3.oas.models.parameters.Parameter parameter) {
      if (parameter.get$ref() != null) return new ParameterReference(parameter.get$ref(), null, null);

      ParameterObject parameterObject = new ParameterObject();

      Optional.ofNullable(parameter.getName()).ifPresent(parameterObject::setName);
      Optional.ofNullable(parameter.getIn()).ifPresent(parameterObject::setIn);
      Optional.ofNullable(parameter.getDescription()).ifPresent(parameterObject::setDescription);
      Optional.ofNullable(parameter.getDeprecated()).ifPresent(parameterObject::setDeprecated);
      Optional.ofNullable(parameter.getStyle()).map(Object::toString).ifPresent(parameterObject::setStyle);
      Optional.ofNullable(parameter.getExplode()).ifPresent(parameterObject::setExplode);
      Optional.ofNullable(parameter.getAllowReserved()).ifPresent(parameterObject::setAllowReserved);
      Optional.ofNullable(parameter.getAllowEmptyValue()).ifPresent(parameterObject::setAllowEmptyValue);
      Optional.ofNullable(parameter.getSchema()).map(SchemaType::parseSchema).ifPresent(parameterObject::setSchema);
      Optional.ofNullable(parameter.getExample()).ifPresent(parameterObject::setExample);
      Optional.ofNullable(parameter.getExamples()).ifPresent(examples -> examples.forEach((key, value) -> parameterObject.addExamples(new ExampleTuple(key, ExampleObject.parseExample(value)))));
      Optional.ofNullable(parameter.getContent()).ifPresent(content -> content.forEach((key, value) -> parameterObject.addContent(new ContentTuple(key, MediaTypeObject.parseMediaType(value)))));
      Optional.ofNullable(parameter.getRequired()).ifPresent(parameterObject::setRequired);
      Optional.ofNullable(parameter.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> parameterObject.addExtensions(new Extension(key, value))));

      return parameterObject;
    }

    public static ResponseType ResponseType.parseResponse(io.swagger.v3.oas.models.responses.ApiResponse response) {
      if (response.get$ref() != null) return new ResponseReference(response.get$ref(), null, null);

      ResponseObject responseObject = new ResponseObject();

      Optional.ofNullable(response.getDescription()).ifPresent(responseObject::setDescription);
      Optional.ofNullable(response.getHeaders()).ifPresent(headers -> headers.forEach((key, value) -> responseObject.addHeaders(new HeaderTuple(key, HeaderType.parseHeader(value)))));
      Optional.ofNullable(response.getContent()).ifPresent(contents -> contents.forEach((key, value) -> responseObject.addContents(new ContentTuple(key, MediaTypeObject.parseMediaType(value)))));
      Optional.ofNullable(response.getLinks()).ifPresent(links -> links.forEach((key, value) -> responseObject.addLinks(new LinkTuple(key, LinkType.parseLink(value)))));
      Optional.ofNullable(response.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> responseObject.addExtensions(new Extension(key, value))));

      return responseObject;
    }

    public static CallbackType CallbackType.parseCallback(io.swagger.v3.oas.models.callbacks.Callback callback) {
      if (callback.get$ref() != null) return new CallbackReference(callback.get$ref(), null, null);

      CallbackObject callbackObject = new CallbackObject();

      Optional.ofNullable(callback).ifPresent(elements -> elements.forEach((key, value) -> callbackObject.addExpressions(new Expression(key, PathItemObject.parsePathItem(value)))));
      Optional.ofNullable(callback.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> callbackObject.addExtensions(new Extension(key, value))));

      return callbackObject;
    }

    public static ServerObject ServerObject.parseServer(io.swagger.v3.oas.models.servers.Server server){
      ServerObject serverObject = new ServerObject();

      Optional.ofNullable(server.getUrl()).ifPresent(serverObject::setUrl);
      Optional.ofNullable(server.getDescription()).ifPresent(serverObject::setDescription);
      Optional.ofNullable(server.getVariables()).ifPresent(variables -> variables.forEach((key, value) -> serverObject.addServerVariables(new ServerVariablesTuple(key, ServerVariableObject.parseServerVariable(value)))));
      Optional.ofNullable(server.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> serverObject.addExtensions(new Extension(key, value))));

      return serverObject;
    }

    public static ServerVariableObject ServerVariableObject.parseServerVariable(io.swagger.v3.oas.models.servers.ServerVariable serverVariable){
      ServerVariableObject serverVariableObject = new ServerVariableObject();

      Optional.ofNullable(serverVariable.getDefault()).ifPresent(serverVariableObject::setDefault);
      Optional.ofNullable(serverVariable.getDescription()).ifPresent(serverVariableObject::setDescription);
      Optional.ofNullable(serverVariable.getEnum()).ifPresent(enums -> enums.forEach(e -> serverVariableObject.addEnums(new Enum(e))));
      Optional.ofNullable(serverVariable.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> serverVariableObject.addExtensions(new Extension(key, value))));

      return serverVariableObject;
    }

    public static EncodingObject EncodingObject.parseEncoding(io.swagger.v3.oas.models.media.Encoding encoding) {
      EncodingObject encodingObject = new EncodingObject();

      Optional.ofNullable(encoding.getContentType()).ifPresent(encodingObject::setContentType);
      Optional.ofNullable(encoding.getHeaders()).ifPresent(headers -> headers.forEach((key, value) -> encodingObject.addHeaders(new HeaderTuple(key, HeaderType.parseHeader(value)))));
      Optional.ofNullable(encoding.getStyle().toString()).ifPresent(encodingObject::setStyle);
      Optional.ofNullable(encoding.getExplode()).ifPresent(encodingObject::setExplode);
      Optional.ofNullable(encoding.getAllowReserved()).ifPresent(encodingObject::setAllowReserved);
      Optional.ofNullable(encoding.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> encodingObject.addExtensions(new Extension(key, value))));

      return encodingObject;
    }

    public static ExampleType ExampleType.parseExample(io.swagger.v3.oas.models.examples.Example example){
      if (example.get$ref() != null) return new ExampleReference(example.get$ref(), null, null);

      ExampleObject exampleObject = new ExampleObject();

      Optional.ofNullable(example.getSummary()).ifPresent(exampleObject::setSummary);
      Optional.ofNullable(example.getDescription()).ifPresent(exampleObject::setDescription);
      Optional.ofNullable(example.getValue()).ifPresent(exampleObject::setValue);
      Optional.ofNullable(example.getExternalValue()).ifPresent(exampleObject::setExternalValue);
      Optional.ofNullable(example.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> exampleObject.addExtensions(new Extension(key, value))));

      return exampleObject;
    }

    public static MediaTypeObject MediaTypeObject.parseMediaType(io.swagger.v3.oas.models.media.MediaType mediaType) {
      MediaTypeObject mediaTypeObject = new MediaTypeObject();

      Optional.ofNullable(mediaType.getSchema()).ifPresent(schema -> mediaTypeObject.setSchema(SchemaType.parseSchema(mediaType.getSchema())));
      Optional.ofNullable(mediaType.getExample()).ifPresent(mediaTypeObject::setExample);
      Optional.ofNullable(mediaType.getExamples()).ifPresent(examples -> examples.forEach((key, value) -> mediaTypeObject.addExamples(new ExampleTuple(key, ExampleObject.parseExample(value)))));
      Optional.ofNullable(mediaType.getEncoding()).ifPresent(encodings -> encodings.forEach((key, value) -> mediaTypeObject.addEncodings(new EncodingTuple(key, EncodingObject.parseEncoding(value)))));
      Optional.ofNullable(mediaType.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> mediaTypeObject.addExtensions(new Extension(key, value))));

      return mediaTypeObject;
    }

    public static LinkType LinkType.parseLink(io.swagger.v3.oas.models.links.Link link) {
      if (link.get$ref() != null) return new LinkReference(link.get$ref(), null, null);

      LinkObject linkObject = new LinkObject();

      Optional.ofNullable(link.getOperationRef()).ifPresent(linkObject::setOperationRef);
      Optional.ofNullable(link.getOperationId()).ifPresent(linkObject::setOperationID);
      Optional.ofNullable(link.getParameters()).ifPresent(parameters -> parameters.forEach((key, value) -> linkObject.addLinkParameters(new LinkParameterTuple(key, value))));
      Optional.ofNullable(link.getDescription()).ifPresent(linkObject::setDescription);
      Optional.ofNullable(link.getServer()).ifPresent(server -> linkObject.setServer(ServerObject.parseServer(server)));
      Optional.ofNullable(link.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> linkObject.addExtensions(new Extension(key, value))));

      return linkObject;
    }

    public static HeaderType HeaderType.parseHeader(io.swagger.v3.oas.models.headers.Header header) {
      if (header.get$ref() != null) return new HeaderReference(header.get$ref(), null, null);

      HeaderObject headerObject = new HeaderObject();

      Optional.ofNullable(header.getRequired()).ifPresent(headerObject::setRequired);
      Optional.ofNullable(header.getDescription()).ifPresent(headerObject::setDescription);
      Optional.ofNullable(header.getDeprecated()).ifPresent(headerObject::setDeprecatedBoolean);
      Optional.ofNullable(header.getStyle().toString()).ifPresent(headerObject::setStyle);
      Optional.ofNullable(header.getExplode()).ifPresent(headerObject::setExplode);
      Optional.ofNullable(header.getExample()).ifPresent(headerObject::setExample);
      Optional.ofNullable(header.getExamples()).ifPresent(examples -> examples.forEach((key, value) -> headerObject.addExamples(new ExampleTuple(key, ExampleObject.parseExample(value)))));
      Optional.ofNullable(header.getContent()).ifPresent(contents -> contents.forEach((key, value) -> headerObject.addContents(new ContentTuple(key, MediaTypeObject.parseMediaType(value)))));
      Optional.ofNullable(header.getSchema()).ifPresent(schema -> headerObject.setExample(SchemaType.parseSchema(schema)));
      Optional.ofNullable(header.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> headerObject.addExtensions(new Extension(key, value))));

      return headerObject;
    }

    public static TagObject TagObject.parseTag(io.swagger.v3.oas.models.tags.Tag tag){
      TagObject tagObject = new TagObject();

      Optional.ofNullable(tag.getName()).ifPresent(tagObject::setName);
      Optional.ofNullable(tag.getDescription()).ifPresent(tagObject::setDescription);
      Optional.ofNullable(tag.getExternalDocs()).ifPresent(externalDoc -> tagObject.setExternalDoc(ExternalDocObject.parseExternalDocs(externalDoc)));
      Optional.ofNullable(tag.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> tagObject.addExtensions(new Extension(key, value))));

      return tagObject;
    }

    public static ExternalDocObject ExternalDocObject.parseExternalDocs(io.swagger.v3.oas.models.ExternalDocumentation externalDocs){
      ExternalDocObject externalDocObject = new ExternalDocObject();

      Optional.ofNullable(externalDocs.getDescription()).ifPresent(externalDocObject::setDescription);
      Optional.ofNullable(externalDocs.getUrl()).ifPresent(externalDocObject::setUrl);
      Optional.ofNullable(externalDocs.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> externalDocObject.addExtensions(new Extension(key, value))));

      return externalDocObject;
    }


    public static SchemaType SchemaType.parseSchema (io.swagger.v3.oas.models.media.Schema<?> schema) {
      if (schema.get$ref() != null) return (SchemaType) new SchemaReference(schema.get$ref(), null, null);

      SchemaObject schemaObject = new SchemaObject();

      Optional.ofNullable(schema.getName()).ifPresent(schemaObject::setName);
      Optional.ofNullable(schema.getAdditionalProperties()).ifPresent(schemaObject::setAdditionalProperties);
      Optional.ofNullable(schema.getDefault()).ifPresent(schemaObject::setDefaultValue);
      Optional.ofNullable(schema.getDescription()).ifPresent(schemaObject::setDescription);
      Optional.ofNullable(schema.getDeprecated()).ifPresent(schemaObject::setDeprecatedBoolean);
      Optional.ofNullable(schema.getDiscriminator()).map(DiscriminatorObject::parseDiscriminator).ifPresent(schemaObject::setDiscriminator);
      Optional.ofNullable(schema.getEnum()).ifPresent(enums -> enums.forEach(object -> schemaObject.addEnum(new EnumObject(object))));
      Optional.ofNullable(schema.getExample()).map(ExampleElement::new).ifPresent(schemaObject::addExampleElements);
      Optional.ofNullable(schema.getExclusiveMaximum()).ifPresent(schemaObject::setExclusiveMaximum);
      Optional.ofNullable(schema.getExclusiveMinimum()).ifPresent(schemaObject::setExclusiveMinimum);
      Optional.ofNullable(schema.getExternalDocs()).map(ExternalDocObject::parseExternalDocs).ifPresent(schemaObject::setExternalDoc);
      Optional.ofNullable(schema.getFormat()).ifPresent(schemaObject::setFormat);
      Optional.ofNullable(schema.getMaximum()).ifPresent(schemaObject::setMaximum);
      Optional.ofNullable(schema.getMinimum()).ifPresent(schemaObject::setMinimum);
      Optional.ofNullable(schema.getMaxItems()).ifPresent(schemaObject::setMaxItems);
      Optional.ofNullable(schema.getMinItems()).ifPresent(schemaObject::setMinItems);
      Optional.ofNullable(schema.getMaxLength()).ifPresent(schemaObject::setMaxLength);
      Optional.ofNullable(schema.getMinLength()).ifPresent(schemaObject::setMinLength);
      Optional.ofNullable(schema.getMaxProperties()).ifPresent(schemaObject::setMaxProperties);
      Optional.ofNullable(schema.getMinProperties()).ifPresent(schemaObject::setMinProperties);
      Optional.ofNullable(schema.getMultipleOf()).ifPresent(schemaObject::setMultipleOf);
      Optional.ofNullable(schema.getNullable()).ifPresent(schemaObject::setNullable);
      Optional.ofNullable(schema.getNot()).map(not -> parseSchema(not)).map(NotSchemaObject::new).ifPresent(schemaObject::setNotSchema);
      Optional.ofNullable(schema.getPattern()).ifPresent(schemaObject::setPattern);
      Optional.ofNullable(schema.getProperties()).ifPresent(properties -> properties.forEach((key, value) -> schemaObject.addPropertyItems(new PropertyItem(key, parseSchema(value)))));
      Optional.ofNullable(schema.getRequired()).ifPresent(required -> required.forEach((value) -> schemaObject.addRequiredFields(new RequiredField(value))));
      handleArraySchema(schema, schemaObject);
      handleComposedSchema(schema, schemaObject);
      Optional.ofNullable(schema.getReadOnly()).ifPresent(schemaObject::setReadOnly);
      Optional.ofNullable(schema.getWriteOnly()).ifPresent(schemaObject::setWriteOnly);
      Optional.ofNullable(schema.getType()).ifPresent(schemaObject::setType);
      Optional.ofNullable(schema.getTitle()).ifPresent(schemaObject::setTitle);
      Optional.ofNullable(schema.getUniqueItems()).ifPresent(schemaObject::setUniqueItems);
      Optional.ofNullable(schema.getXml()).map(XmlObject::parseXml).ifPresent(schemaObject::setXml);
      Optional.ofNullable(schema.getExtensions()).ifPresent(extensions -> extensions.forEach((key, value) -> schemaObject.addExtensions(new Extension(key, value))));

      return schemaObject;
    }

    private static void SchemaType.handleArraySchema(io.swagger.v3.oas.models.media.Schema<?> schema, SchemaObject schemaObject) {
      if (schema instanceof io.swagger.v3.oas.models.media.ArraySchema) {
        Optional.ofNullable(((io.swagger.v3.oas.models.media.ArraySchema) schema).getItems())
                .map(items -> parseSchema(items))
                .map(ItemsSchemaObject::new)
                .ifPresent(schemaObject::setItemsSchema);
      }
    }

    private static void SchemaType.handleComposedSchema(io.swagger.v3.oas.models.media.Schema<?> schema, SchemaObject schemaObject) {
      if (schema instanceof io.swagger.v3.oas.models.media.ComposedSchema) {
        Optional.ofNullable(((io.swagger.v3.oas.models.media.ComposedSchema) schema).getOneOf())
                .ifPresent(oneOf -> oneOf.forEach(element -> schemaObject.addOneOfSchema(new OneOfSchemaObject(parseSchema(element)))));
        Optional.ofNullable(((io.swagger.v3.oas.models.media.ComposedSchema) schema).getAnyOf())
                .ifPresent(anyOf -> anyOf.forEach(element -> schemaObject.addAnyOfSchema(new AnyOfSchemaObject(parseSchema(element)))));
        Optional.ofNullable(((io.swagger.v3.oas.models.media.ComposedSchema) schema).getAllOf())
                .ifPresent(allOf -> allOf.forEach(element -> schemaObject.addAllOfSchema(new AllOfSchemaObject(parseSchema(element)))));
      }
    }

    public static DiscriminatorObject DiscriminatorObject.parseDiscriminator (io.swagger.v3.oas.models.media.Discriminator discriminator) {
      DiscriminatorObject discriminatorObject = new DiscriminatorObject();

      Optional.ofNullable(discriminator.getPropertyName()).ifPresent(discriminatorObject::setPropertyName);
      Optional.ofNullable(discriminator.getMapping()).ifPresent(mapping -> mapping.keySet().forEach(key -> discriminatorObject.addMappings(new MappingTuple(key, mapping.get(key)))));

      return discriminatorObject;
    }

    public static XmlObject XmlObject.parseXml (io.swagger.v3.oas.models.media.XML xml) {
      XmlObject xmlObject = new XmlObject();

      Optional.ofNullable(xml.getName()).ifPresent(xmlObject::setName);
      Optional.ofNullable(xml.getNamespace()).ifPresent(xmlObject::setNamespace);
      Optional.ofNullable(xml.getPrefix()).ifPresent(xmlObject::setPrefix);
      Optional.ofNullable(xml.getAttribute()).ifPresent(xmlObject::setAttribute);
      Optional.ofNullable(xml.getWrapped()).ifPresent(xmlObject::setWrapped);

      Optional.ofNullable(xml.getExtensions())
              .ifPresent(extensions -> extensions.forEach((key, value) -> xmlObject.addExtensions(new Extension(key, value))));

      return xmlObject;
    }

    public static SecuritySchemeType SecuritySchemeType.parseSecurityScheme(io.swagger.v3.oas.models.security.SecurityScheme securityScheme) {
      if (securityScheme.get$ref() != null)
        return (SecuritySchemeType) new SecuritySchemeReference(securityScheme.get$ref(), null, null);

      SecuritySchemeObject securitySchemeObject = new SecuritySchemeObject();

      Optional.ofNullable(securityScheme.getType().toString()).ifPresent(securitySchemeObject::setType);
      Optional.ofNullable(securityScheme.getName()).ifPresent(securitySchemeObject::setName);
      Optional.ofNullable(securityScheme.getIn().toString()).ifPresent(securitySchemeObject::setIn);
      Optional.ofNullable(securityScheme.getScheme()).ifPresent(securitySchemeObject::setScheme);
      Optional.ofNullable(securityScheme.getOpenIdConnectUrl()).ifPresent(securitySchemeObject::setOpenIdConnectUrl);
      Optional.ofNullable(securityScheme.getFlows()).ifPresent(flows -> securitySchemeObject.setOAuthFlows(OAuthFlowsObject.parseOAuthFlows(flows)));
      Optional.ofNullable(securityScheme.getDescription()).ifPresent(securitySchemeObject::setDescription);
      Optional.ofNullable(securityScheme.getBearerFormat()).ifPresent(securitySchemeObject::setBearerFormat);

      Optional.ofNullable(securityScheme.getExtensions())
              .ifPresent(extensions -> extensions.forEach((key, value) -> securitySchemeObject.addExtensions(new Extension(key, value))));

      return securitySchemeObject;
    }

    public static OAuthFlowsObject OAuthFlowsObject.parseOAuthFlows(io.swagger.v3.oas.models.security.OAuthFlows oAuthFlows){
      OAuthFlowsObject oAuthFlowsObject = new OAuthFlowsObject();

      Optional.ofNullable(oAuthFlows.getImplicit())
              .ifPresent(implicit -> oAuthFlowsObject.setImplicit(OAuthFlowObject.parseOAuthFlow(oAuthFlows.getImplicit())));
      Optional.ofNullable(oAuthFlows.getPassword())
              .ifPresent(password -> oAuthFlowsObject.setPassword(OAuthFlowObject.parseOAuthFlow(oAuthFlows.getPassword())));
      Optional.ofNullable(oAuthFlows.getClientCredentials())
              .ifPresent(clientCredentials -> oAuthFlowsObject.setClientCredentials(OAuthFlowObject.parseOAuthFlow(oAuthFlows.getClientCredentials())));
      Optional.ofNullable(oAuthFlows.getAuthorizationCode())
              .ifPresent(authorizationCode -> oAuthFlowsObject.setAuthorizationCode(OAuthFlowObject.parseOAuthFlow(oAuthFlows.getAuthorizationCode())));
      Optional.ofNullable(oAuthFlows.getExtensions())
              .ifPresent(extensions -> extensions.forEach((key, value) -> oAuthFlowsObject.addExtensions(new Extension(key, value))));

      return oAuthFlowsObject;
    }


    public static OAuthFlowObject OAuthFlowObject.parseOAuthFlow(io.swagger.v3.oas.models.security.OAuthFlow oAuthFlow){
      OAuthFlowObject oAuthFlowObject = new OAuthFlowObject();

      Optional.ofNullable(oAuthFlow.getAuthorizationUrl()).ifPresent(oAuthFlowObject::setAuthorizationUrl);
      Optional.ofNullable(oAuthFlow.getTokenUrl()).ifPresent(oAuthFlowObject::setTokenUrl);
      Optional.ofNullable(oAuthFlow.getRefreshUrl()).ifPresent(oAuthFlowObject::setRefreshUrl);
      Optional.ofNullable(oAuthFlow.getExtensions())
              .ifPresent(extensions -> extensions.forEach((key, value) -> oAuthFlowObject.addExtensions(new Extension(key, value))));

      oAuthFlow
              .getScopes()
              .forEach((key, value) -> oAuthFlowObject.addScopes(new ScopesTuple(key, value)));

      return oAuthFlowObject;
    }

    public static SecurityRequirementObject SecurityRequirementObject.parseSecurityRequirement(io.swagger.v3.oas.models.security.SecurityRequirement securityRequirement){
      SecurityRequirementObject securityRequirementObject = new SecurityRequirementObject();

      securityRequirement.keySet().stream()
              .map(key -> new SecurityRequirementTuple(key, createSecurityRequirementValues(securityRequirement.get(key))))
              .forEach(securityRequirementObject::addTuple);

      return securityRequirementObject;
    }

    private static JastAddList<SecurityRequirementValue> SecurityRequirementObject.createSecurityRequirementValues(List<String> values) {
      List<SecurityRequirementValue> resultList = values.stream()
              .map(SecurityRequirementValue::new)
              .collect(Collectors.toList());
      JastAddList<SecurityRequirementValue> jastAddList = new JastAddList<>();
      for (SecurityRequirementValue value : resultList) jastAddList.add(value);

      return jastAddList;
    }
}
