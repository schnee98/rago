import java.util.*;
aspect Reference {

    inh OpenAPIObject ASTNode.root();
    eq OpenAPIObject.getChild().root() = this;

    coll List<SchemaTuple> OpenAPIObject.schemaTuples() [new ArrayList<>()] root OpenAPIObject;
    SchemaTuple contributes this
        to OpenAPIObject.schemaTuples();

    coll List<ResponseTuple> OpenAPIObject.responseTuples() [new ArrayList<>()] root OpenAPIObject;
    ResponseTuple contributes this
        to OpenAPIObject.responseTuples();

    coll List<ParameterTuple> OpenAPIObject.parameterTuples() [new ArrayList<>()] root OpenAPIObject;
    ParameterTuple contributes this
        to OpenAPIObject.parameterTuples();

    coll List<RequestBodyTuple> OpenAPIObject.requestBodyTuples() [new ArrayList<>()] root OpenAPIObject;
    RequestBodyTuple contributes this
        to OpenAPIObject.requestBodyTuples();

    coll List<HeaderTuple> OpenAPIObject.headerTuples() [new ArrayList<>()] root OpenAPIObject;
    HeaderTuple contributes this
        to OpenAPIObject.headerTuples();

    coll List<SecuritySchemeTuple> OpenAPIObject.securitySchemeTuples() [new ArrayList<>()] root OpenAPIObject;
    SecuritySchemeTuple contributes this
        to OpenAPIObject.securitySchemeTuples();

    coll List<LinkTuple> OpenAPIObject.linkTuples() [new ArrayList<>()] root OpenAPIObject;
    LinkTuple contributes this
        to OpenAPIObject.linkTuples();

    coll List<CallbackTuple> OpenAPIObject.callbackTuples() [new ArrayList<>()] root OpenAPIObject;
    CallbackTuple contributes this
        to OpenAPIObject.callbackTuples();

    coll List<PathItemTuple> OpenAPIObject.pathItemTuples() [new ArrayList<>()] root OpenAPIObject;
    PathItemTuple contributes this
        to OpenAPIObject.pathItemTuples();

    coll List<ParameterType> OpenAPIObject.parameterTypes() [new ArrayList<>()] root OpenAPIObject;
    ParameterType contributes this
        to OpenAPIObject.parameterTypes();

    syn PathItemObject PathItemType.pathItemObject();
    eq PathItemObject.pathItemObject() = this;
    eq PathItemReference.pathItemObject() {
      for (PathItemTuple tuple : root().pathItemTuples()) {
        if (tuple.getKey().equals(getRef().substring(getRef().lastIndexOf("/") + 1)))
          return  tuple.getPathItem().pathItemObject();
      }
      return new PathItemObject();
    }

    syn ParameterObject ParameterType.parameterObject();
    eq ParameterObject.parameterObject() = this;
    eq ParameterReference.parameterObject() {
      for (ParameterTuple tuple : root().parameterTuples()) {
        if (tuple.getKey().equals(getRef().substring(getRef().lastIndexOf("/") + 1)))
          return tuple.getParameter().parameterObject();
      }
      return new ParameterObject();
    }

    syn SchemaObject SchemaType.schemaObject();
    eq SchemaObject.schemaObject() = this;
    eq SchemaReference.schemaObject() {
      for (SchemaTuple tuple : root().schemaTuples()) {
        if (tuple.getKey().equals(getRef().substring(getRef().lastIndexOf("/") + 1)))
          return tuple.getSchema().schemaObject();
      }
      return new SchemaObject();
    }

    syn RequestBodyObject RequestBodyType.requestBodyObject();
    eq RequestBodyObject.requestBodyObject() = this;
    eq RequestBodyReference.requestBodyObject() {
      for (RequestBodyTuple tuple : root().requestBodyTuples()) {
        if (tuple.getKey().equals(getRef().substring(getRef().lastIndexOf("/") + 1)))
          return tuple.getRequestBody().requestBodyObject();
      }
      return new RequestBodyObject();
    }

    syn ResponseObject ResponseType.responseObject();
    eq ResponseObject.responseObject() = this;
    eq ResponseReference.responseObject() {
      for (ResponseTuple tuple : root().responseTuples()) {
        if (tuple.getKey().equals(getRef().substring(getRef().lastIndexOf("/") + 1)))
          return tuple.getResponse().responseObject();
      }
      return new ResponseObject();
    }

    syn CallbackObject CallbackType.callbackObject();
    eq CallbackObject.callbackObject() = this;
    eq CallbackReference.callbackObject() {
      for (CallbackTuple tuple : root().callbackTuples()) {
        if (tuple.getKey().equals(getRef().substring(getRef().lastIndexOf("/") + 1)))
          return tuple.getCallback().callbackObject();
      }
      return new CallbackObject();
    }

    syn LinkObject LinkType.linkObject();
    eq LinkObject.linkObject() = this;
    eq LinkReference.linkObject() {
      for (LinkTuple tuple : root().linkTuples()) {
        if (tuple.getKey().equals(getRef().substring(getRef().lastIndexOf("/") + 1)))
          return tuple.getLink().linkObject();
      }
      return new LinkObject();
    }

    syn HeaderObject HeaderType.headerObject();
    eq HeaderObject.headerObject() = this;
    eq HeaderReference.headerObject() {
      for (HeaderTuple tuple : root().headerTuples()) {
        if (tuple.getKey().equals(getRef().substring(getRef().lastIndexOf("/") + 1)))
          return tuple.getHeader().headerObject();
      }
      return new HeaderObject();
    }

    syn SecuritySchemeObject SecuritySchemeType.securitySchemeObject();
    eq SecuritySchemeObject.securitySchemeObject() = this;
    eq SecuritySchemeReference.securitySchemeObject() {
      for (SecuritySchemeTuple tuple : root().securitySchemeTuples()) {
        if (tuple.getKey().equals(getRef().substring(getRef().lastIndexOf("/") + 1)))
          return tuple.getSecurityScheme().securitySchemeObject();
      }
      return new SecuritySchemeObject();
    }
}